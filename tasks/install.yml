---
    
- name: 'Ensure dir is set.'
  block:
    - name: 'Stat directory.'
      stat:
        get_attributes: false
        get_checksum: false
        get_md5: false
        get_mime: false
        path: '{{ item.dir }}'
      register: 'awsbeats_dir'
    - name: 'Create directory if does not exist.'
      file:
        group: '{{ item.group }}'
        mode: '{{ item.dirmode }}'
        owner: '{{ item.owner }}'
        path: '{{ item.dir }}'
        recurse: true
        state: 'directory'
      when: 'not awsbeats_dir.stat.exists'
    - name: 'Ensure url and name are set.'
      block:
        - name: 'Install binary (get_url).'
          get_url:
            dest: '{{ item.dir }}/{{ item.name }}'
            group: '{{ item.group }}'
            mode: '{{ item.filemode }}'
            owner: '{{ item.owner }}'
            url: '{{ item.url }}'
          async: '{{ awsbeats_async_timeout }}'
          register: 'awsbeats_install_1'
        - name: 'Install binary (async_status)'
          async_status:
            jid: '{{ awsbeats_install_1.ansible_job_id }}'
          register: 'awsbeats_install_1_result'
          retries: '{{ awsbeats_async_tries }}'
          until: 'awsbeats_install_1_result is defined and
                  awsbeats_install_1_result.finished|default(false)'
          when: 'awsbeats_install_1 is defined and not (
                 awsbeats_install_1.finished|default(false) or
                 awsbeats_install_1.ansible_job_id is not defined)'
      when:
        - '"url" in item'
        - '"name" in item'
    - name: 'Install template.'
      notify: 'restart awsbeats'
      template:
        dest: '{{ item.dir }}/{{ item.name }}'
        group: '{{ item.group }}'
        mode: '{{ item.filemode }}'
        owner: '{{ item.owner }}'
        src: '{{ item.template }}'
      when:
        '"template" in item'
  when: '"dir" in item'
